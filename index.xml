<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Hugo Site</title>
    <link>https://wsg114514.github.io/</link>
    <description>Recent content on My Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Feb 2020 09:31:21 +0800</lastBuildDate>
    
	<atom:link href="https://wsg114514.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据结构-字典树（Java）</title>
      <link>https://wsg114514.github.io/post/trie/</link>
      <pubDate>Sat, 15 Feb 2020 09:31:21 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/trie/</guid>
      <description>线段树用来存储单词，以每一个字母为一个节点，利用TreeMap映射关系字母key指向下一个节点。
import java.util.TreeMap;//需要用到映射
字典树,存储character对象
public class Trie {private class Node{ 到这个字母时判断是否已经是一个单词
 public boolean isWord;public TreeMap&amp;lt;Character, Node&amp;gt; next; 内部类构造函数
 public Node(boolean isWord) {this.isWord=isWord;next=new TreeMap&amp;lt;Character, Trie.Node&amp;gt;();}public Node() {this(false);}}private Node root;//根节点private int size;//存储单词数量 构造函数
public Trie() {root=new Node();size=0;} 获得Trie中存储的单词数量
public int getSize() {return size;} 添加一个单词word，把单词拆成一个个字母，把字母放进Trie树里。
public void add(String word) {Node cur=root;for(int i=0;i&amp;lt;word.</description>
    </item>
    
    <item>
      <title>数据结构-并查集（java）</title>
      <link>https://wsg114514.github.io/post/uf/</link>
      <pubDate>Fri, 14 Feb 2020 18:18:59 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/uf/</guid>
      <description>本博客写了一共六个版本的并查集，并查集的主要作用是检查两个节点是否在同一个集合里，或者把两个节点并到同一个集合里，主要用在检查连个端点是否连接。
接口设置
public interface UF {int getSize();boolean isConnected(int p,int q);//查看两个节点是否连接void unionElements(int p,int q);//将两个元素并在一起} 并查集版本1，底层只是普通数组。
public class UnionFind1 implements UF {private int[] id;	public UnionFind1(int size) {id=new int[size];for(int i=0;i&amp;lt;id.length;i++) {id[i]=i;}} 查找元素p所对应的集合编号
private int find(int p) {if(p&amp;lt;0&amp;amp;&amp;amp;p&amp;gt;=id.length) {throw new IllegalArgumentException(&amp;quot;p is out of bound.&amp;quot;);}return id[p];}@Overridepublic int getSize() {return id.length;} 查看元素p和元素q是否所属一个集合</description>
    </item>
    
    <item>
      <title>数据结构-线段树（Java泛型）</title>
      <link>https://wsg114514.github.io/post/segmenttree/</link>
      <pubDate>Tue, 11 Feb 2020 16:16:20 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/segmenttree/</guid>
      <description>线段树的特点是动态地保存数据，修改数据，选择一个区间范围内的数据加以修改。由于时间复杂度为O(logn)所以运算较快，但是非常耗费空间，为了保存一个数组数据内容通常要按照最坏的情况为线段树申请空间，为原数组占用空间的4倍。 融合器
public interface Merger&amp;lt;E&amp;gt; {E merge(E a,E b);} 线段树
public class SegmentTree&amp;lt;E&amp;gt; {private E[] tree;private E[] data;private Merger&amp;lt;E&amp;gt; merger; 构造函数
public SegmentTree(E[] arr,Merger&amp;lt;E&amp;gt; merger) {this.merger=merger;data=(E[])new Object[arr.length];for(int i=0;i&amp;lt;arr.length;i++) {data[i]=arr[i];}//线段树用一个树来表示,其所需要的最大空间为存储的数组容量的4倍tree=(E[])new Object[4*arr.length];buildSegmentTree(0,0,data.length-1);} 在treeIndex的位置，创建表示区间[l&amp;hellip;.r]的线段树
private void buildSegmentTree(int treeIndex,int l,int r) {//单个节点if(l==r) {tree[treeIndex]=data[l];return;}int leftTreeIndex=leftChild(treeIndex);int rightTreeIndex=rightChild(treeIndex);//设置区间变量int mid=l+(r-l)/2;buildSegmentTree(leftTreeIndex, l, mid);buildSegmentTree(rightTreeIndex, mid+1, r);tree[treeIndex]=merger.</description>
    </item>
    
    <item>
      <title>数据结构-最大二叉树（Java泛型）</title>
      <link>https://wsg114514.github.io/post/maxheap/</link>
      <pubDate>Tue, 11 Feb 2020 15:56:38 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/maxheap/</guid>
      <description>最大二叉树作为一个完全二叉树,可以用数组Array来装，其特点是父节点比两个子节点大。在最后有用最大二叉树为底层实现的优先队列。
public class MaxHeap&amp;lt;E extends Comparable&amp;lt;E&amp;gt;&amp;gt; {private Array&amp;lt;E&amp;gt; data; 构造函数
public MaxHeap(int capacity) {data=new Array&amp;lt;&amp;gt;(capacity);}public MaxHeap() {data=new Array&amp;lt;&amp;gt;();}public MaxHeap(E[] arr) {data=new Array&amp;lt;&amp;gt;(arr);//用一个循环，从最后一个非叶子节点开始（就是最后一个叶子节点的父节点），到根节点进行siftDown操作。for(int i=parent(arr.length-1);i&amp;gt;=0;i--) {siftDown(i);}} 返回堆中的元素个数
public int size() {return data.getSize();} 返回一个布尔值，表示堆中是否为空
public boolean isEmpty() {return data.isEmpty();} 设置三个私有辅助函数 返回完全二叉树的数组表示中，一个索引所表示的元素的父亲节点的索引
private int parent(int index) {if(index==0) {throw new IllegalAccessError(&amp;quot;index-0 doesn&#39;t have parent.</description>
    </item>
    
    <item>
      <title>数据结构-二叉树Map映射（Java泛型）</title>
      <link>https://wsg114514.github.io/post/bstmap/</link>
      <pubDate>Sat, 01 Feb 2020 20:35:20 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/bstmap/</guid>
      <description>以二叉树为底层实现的Map映射，在博客结尾有链表Map与二叉树Map的运算比较
import java.util.ArrayList;public class BSTMap&amp;lt;K extends Comparable&amp;lt;K&amp;gt;,V&amp;gt;implements Map&amp;lt;K, V&amp;gt; {private class Node{public K key;public V value;public Node left,right; public Node(K key,V value) {this.key=key;this.value=value;left=null;right=null;}} 成员变量
private Node root;private int size;public BSTMap() {root=null;size=0;} 辅助函数,返回以node为根节点的二分搜索树中，key所在的节点
private Node getNode(Node node,K key) {if(node==null) {return null;}if(key.compareTo(node.key)==0) {return node;}else if(key.compareTo(node.key)&amp;lt;0) {return getNode(node.left, key);}else { //(key.</description>
    </item>
    
    <item>
      <title>数据结构-链表Map映射（Java泛型）</title>
      <link>https://wsg114514.github.io/post/linkedlistmap/</link>
      <pubDate>Sat, 01 Feb 2020 17:26:00 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/linkedlistmap/</guid>
      <description>接口设计：
public interface Map&amp;lt;K, V&amp;gt; {void add(K key,V value);//加入一个key为值，value为键的map元素V remove(K key);//删除值为key的map元素boolean contains(K key);//查看是否存在值为key的元素V get(K key);//获得值为key的value值void set(K key,V newValue);//重新设置值为key的valueint getSize();//返回长度boolean isEmpty();//查看是否为空} 以链表为底层实现的Map映射，在博客结尾有应用例题
import java.util.ArrayList;public class LinkedListMap&amp;lt;K, V&amp;gt; implements Map&amp;lt;K, V&amp;gt; { 定义一个节点内部类
private class Node{public K key;public V value;public Node next;public Node(K key,V value,Node next) {this.key=key;this.value=value;this.next=next;}//public Node(K key,V value) {this(key,value,null);}public Node(K key) {this(key,null,null);}public Node() {this(null,null,null);}@Overridepublic String toString() {return key.</description>
    </item>
    
    <item>
      <title>数据结构-自定义集合比较（Java泛型）</title>
      <link>https://wsg114514.github.io/post/set/</link>
      <pubDate>Sat, 01 Feb 2020 15:24:40 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/set/</guid>
      <description>接口设置
public interface Set&amp;lt;E&amp;gt; {void add(E e);void remove(E e);boolean contains(E e);//判断是否有e元素int getSize();boolean isEmpty();} 以二叉树为底层数据结构设计的集合
public class BSTSet&amp;lt;E extends Comparable&amp;lt;E&amp;gt;&amp;gt; implements Set&amp;lt;E&amp;gt; {private BST&amp;lt;E&amp;gt; bst;//构造函数public BSTSet() {bst=new BST&amp;lt;E&amp;gt;();}@Overridepublic void add(E e) {bst.add(e);}public void remove(E e) {bst.remove(e);}@Overridepublic boolean contains(E e) {return bst.contains(e);}@Overridepublic int getSize() {return bst.getSize();}@Overridepublic boolean isEmpty() {return bst.</description>
    </item>
    
    <item>
      <title>数据结构-自定义二分搜索树（Java泛型）</title>
      <link>https://wsg114514.github.io/post/bst/</link>
      <pubDate>Wed, 29 Jan 2020 19:35:31 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/bst/</guid>
      <description>自定义的一个二分搜索树，实现基本增删改查功能，前中后序遍历，广度优先遍历，不能存储重复元素。在博客后面附带利用二叉树不存储重复元素的特性解出的Leecode第804题。
import java.util.LinkedList;import java.util.Stack;import java.util.Queue; 二分搜索树存储的元素必须具有比较性 成员变量：
public class BST&amp;lt;E extends Comparable&amp;lt;E&amp;gt;&amp;gt; {private class Node{public E e;public Node left,right;public Node(E e) {this.e=e;left=null;right=null;}}private Node root;//根节点private int size;//记录存储了多少元素 构造函数：
public BST() {root=null;size=0;} 方法实现：
public int getSize() {return size;}public boolean isEmpty() {return size==0;} 向二分搜索树中添加新的元素e
public void add(E e) {root=add(root, e);}//向以node为根的二分搜索树中插入元素E，递归算法//递归思路：重点.</description>
    </item>
    
    <item>
      <title>切比雪夫距离算法-路径最优选择</title>
      <link>https://wsg114514.github.io/post/chebyshev/</link>
      <pubDate>Sun, 26 Jan 2020 12:40:04 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/chebyshev/</guid>
      <description>国际象棋棋盘上二个位置间的切比雪夫距离是指王要从一个位子移至另一个位子需要走的步数。由于王可以往斜前或斜后方向移动一格，因此可以较有效率的到达目的的格子。数学上，切比雪夫距离或是L∞度量，是向量空间中的一种度量，二个点之间的距离定义为其各座标数值差绝对值的最大值。比较常用的实例就是在无障碍的情况下计算两点之间的路程，沿水平或者竖直方向移动一个单位长度，或者跨过对角线的时间相同。
例题：平面上有 n 个点，点的位置用整数坐标表示 points[i] = [xi, yi]。请你计算访问所有这些点需要的最小时间（以秒为单位）。
你可以按照下面的规则在平面上移动：
每一秒沿水平或者竖直方向移动一个单位长度，或者跨过对角线（可以看作在一秒内向水平和竖直方向各移动一个单位长度）。 必须按照数组中出现的顺序来访问这些点。
示例 1： 输入：points = [[1,1],[3,4],[-1,0]] 输出：7 解释：一条最佳的访问路径是： [1,1] -&amp;gt; [2,2] -&amp;gt; [3,3] -&amp;gt; [3,4] -&amp;gt; [2,3] -&amp;gt; [1,2] -&amp;gt; [0,1] -&amp;gt; [-1,0]
从 [1,1] 到 [3,4] 需要 3 秒 从 [3,4] 到 [-1,0] 需要 4 秒 一共需要 7 个单位时间。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/minimum-time-visiting-all-points
解决代码：
class Solution {public int minTimeToVisitAllPoints(int[][] points) {int res=0;for(int i=1;i&amp;lt;points.length;i++) {int wid=Math.abs(points[i][0]-points[i-1][0]);//算出两点之间横坐标的距离winint hei=Math.abs(points[i][1]-points[i-1][1]);//算出两点之间从坐标的距离heiif(wid==hei) {res+=wid;}else {int min=Math.</description>
    </item>
    
    <item>
      <title>数据结构-自定义链表队列（Java泛型）</title>
      <link>https://wsg114514.github.io/post/linkedlistqueue/</link>
      <pubDate>Thu, 23 Jan 2020 21:48:14 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/linkedlistqueue/</guid>
      <description>用链表实现的队列，用head指向开头，用tail指向最后一个元素，所以在head指向的对象执行出队，在tail指向的对象执行入队。在本篇结束时附带，数组数组队列，循环队列，链表队列的算法比较。方法解释在之前的Queue接口设置中已经说明。
public class LinkedListQueue&amp;lt;E&amp;gt; implements Queue&amp;lt;E&amp;gt; {private class Node{public E e;public Node next;public Node(E e,Node next) {this.e=e;this.next=next;}public Node(E e) {this(e, null);}public Node() {this(null,null);}@Overridepublic String toString() {return e.toString();}} 成员变量
private Node head,tail;private int size; 构造函数
public LinkedListQueue() {head=null;tail=null;size=0;}@Overridepublic int getSize() {return size;}@Overridepublic boolean isEmpty() {return size==0;} 入队方法，在队列为空时head=tail。</description>
    </item>
    
    <item>
      <title>数据结构-自定义动态链表（Java泛型）</title>
      <link>https://wsg114514.github.io/post/linkedlist/</link>
      <pubDate>Thu, 23 Jan 2020 21:35:38 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/linkedlist/</guid>
      <description>自定义一个真正意义上的动态数据结构LinkedList，链表。在文章最后附带利用本次实现的链表作为底层实现的链表栈。
public class LinkedList&amp;lt;E&amp;gt; { 内部类Node用来存储数据，Node型的next指向下一个元素
private class Node{public E e;public Node next;public Node(E e,Node next) {this.e=e;this.next=next;} public Node(E e) {this(e, null);}public Node() {this(null,null);}@Overridepublic String toString() {return e.toString();}}	private Node dummyhead;//设置虚拟头节点private int size;public LinkedList() {dummyhead=new Node(null,null);size=0;} 获取链表中的元素个数
public int getSize() {return size;} 返回链表受否为空
public boolean siEmpty() {return size==0;} 在链表的index位置添加新的元素e,复杂度O(n) 在链表中并不是一个常用的操作，练习用:)</description>
    </item>
    
    <item>
      <title>数据结构-自定义循环队列（Java泛型）</title>
      <link>https://wsg114514.github.io/post/loopqueue/</link>
      <pubDate>Sun, 19 Jan 2020 19:57:14 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/loopqueue/</guid>
      <description>自定义的一个动态循环队列，与数组队列有所不同，新加入两个变量，front为栈首位置，tail为加入元素位置，当队列为空的时候front=tail，当（tail+1）%c=front时队列满，在队列的Capacipy中，总要浪费一个空间。在本章的后面有循环队列与数组队列的比较。（由于在循环队列中添加一个元素的方法复杂度变为O（1），相比数组队列的添加算法复杂度O（n）要快很多）
接口定义
public interface Queue&amp;lt;E&amp;gt; {int getSize();//获取队列长度boolean isEmpty();//判断队列是否为空void enqueue(E e);//向队尾添加E dequeue();//获取队首的元素E getFront();//查看队首的元素} 自定义循环队列
public class LoopQueue&amp;lt;E&amp;gt;implements Queue&amp;lt;E&amp;gt; { 成员变量
private E[] data;private int front,tail;//front为栈首，tail为加入元素对象private int size;//元素个数 构造函数
public LoopQueue(int capacity) {data=(E[])new Object[capacity+1];front=0;tail=0;size=0;}public LoopQueue() {this(10);} 基本方法
public int getCapacity() {return data.length-1;}@Overridepublic int getSize() {return size;}@Overridepublic boolean isEmpty() {return front==tail;}@Overridepublic void enqueue(E e) {//复杂度O(1)if((tail+1)%data.</description>
    </item>
    
    <item>
      <title>数据结构-自定义数组队列（Java泛型）</title>
      <link>https://wsg114514.github.io/post/arrayqueue/</link>
      <pubDate>Sun, 19 Jan 2020 19:45:41 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/arrayqueue/</guid>
      <description>自定义的一个动态数组队列，类似于Array篇中Array类的子类，存储结构如同字面上的意思，先进先出。
接口定义
public interface Queue&amp;lt;E&amp;gt; {int getSize();//获取队列长度boolean isEmpty();//判断队列是否为空void enqueue(E e);//向队尾添加E dequeue();//获取队首的元素E getFront();//查看队首的元素} 自定义数组队列
public class ArrayQueue&amp;lt;E&amp;gt; implements Queue&amp;lt;E&amp;gt;{ 成员变量
private Array&amp;lt;E&amp;gt; array; 构造方法
public ArrayQueue(int capacity) {array=new Array&amp;lt;&amp;gt;(capacity);}public ArrayQueue() {array=new Array&amp;lt;&amp;gt;();} 基本方法
@Overridepublic int getSize() {//复杂度O(1)return array.getSize();}@Overridepublic boolean isEmpty() {return array.isEmpty();}@Overridepublic void enqueue(E e) {//复杂度O(1)array.addlist(e);}@Overridepublic E dequeue() {//复杂度O(n)return array.</description>
    </item>
    
    <item>
      <title>数据结构-自定义动态栈（Java泛型）</title>
      <link>https://wsg114514.github.io/post/stack/</link>
      <pubDate>Sat, 18 Jan 2020 22:18:42 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/stack/</guid>
      <description>自定义的一个动态栈，方法很简单，所用到的方法基本在我的上一篇Array类中已经实现了，栈结构虽然简单但是非常重要，按照其先进后出的存储模式运用在撤销操作中很实用，在本页面最后附带LeetCode第20道题解法，（给定一个只包括 &amp;lsquo;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&amp;rsquo; 的字符串，判断字符串是否有效。）此题为twitter等许多大公司面试经典实用例题。
接口定义
public interface Stack&amp;lt;E&amp;gt; {int getSize();//获取栈长度boolean isEmpty();//判断栈是否为空void push(E e);//向栈中加入元素E pop();//取出栈顶元素E peek();//查看栈顶元素 自定义动态栈
public class ArrayStack&amp;lt;E&amp;gt; implements Stack&amp;lt;E&amp;gt; {Array&amp;lt;E&amp;gt; array;//成员变量（在自定义Array类中写的动态数组）//构造函数public ArrayStack(int capacity) {array=new Array&amp;lt;&amp;gt;(capacity);}public ArrayStack() {array=new Array&amp;lt;&amp;gt;(10);}@Override//时间复杂度O（1）public int getSize() {return array.getSize();}@Override//时间复杂度O（1）public boolean isEmpty() {return array.isEmpty();}@Override//时间复杂度O（1）public void push(E e) {array.addlist(e);}@Override//时间复杂度O（1）public E pop() {return array.</description>
    </item>
    
    <item>
      <title>数据结构-自定义动态数组（Java泛型）</title>
      <link>https://wsg114514.github.io/post/blog/</link>
      <pubDate>Wed, 15 Jan 2020 00:17:52 +0800</pubDate>
      
      <guid>https://wsg114514.github.io/post/blog/</guid>
      <description>自定义类Array，实现动态存储数据，实现基本增删改查功能，优化内存存储。
public class Array&amp;lt;E&amp;gt; {private E[] data;private int size; 有参构造函数
public Array(int capacity) {data =(E[])new Object[capacity];size=0;} 无参构造函数
public Array() {this(10);}public int getSize() {return size;}public int getCapacity() {return data.length;}public boolean isEmpty() {return size==0;} 在末尾加入一个元素
public void addlist(E e) {add(size, e);} 在开头加入一个元素
public void addFirst(E e) {add(0,e);} 在数组指定位置加入一个数组</description>
    </item>
    
  </channel>
</rss>